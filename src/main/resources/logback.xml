<?xml version="1.0" encoding="UTF-8" ?>
<!-- 说明： 1、日志级别及文件 日志记录采用分级记录，级别与日志文件名相对应，不同级别的日志信息记录到不同的日志文件中 例如：error级别记录到log_error_xxx.log或log_error.log（该文件为当前记录的日志文件），而log_error_xxx.log为归档日志， 
	日志文件按日期记录，同一天内，若日志文件大小等于或大于2M，则按0、1、2...顺序分别命名 例如log-level-2013-12-21.0.log 
	其它级别的日志也是如此。 2、文件路径 若开发、测试用，在Eclipse中运行项目，则到Eclipse的安装路径查找logs文件夹，以相对路径../logs。 
	若部署到Tomcat下，则在Tomcat下的logs文件中 3、Appender FILEERROR对应error级别，文件名以log-error-xxx.log形式命名 
	FILEWARN对应warn级别，文件名以log-warn-xxx.log形式命名 FILEINFO对应info级别，文件名以log-info-xxx.log形式命名 
	FILEDEBUG对应debug级别，文件名以log-debug-xxx.log形式命名 stdout将日志信息输出到控制上，为方便开发测试使用 -->

<!-- static Level DEBUG DEBUG Level指出细粒度信息事件对调试应用程序是非常有帮助的。 static Level 
	INFO INFO level表明 消息在粗粒度级别上突出强调应用程序的运行过程。 static Level WARN WARN level表明会出现潜在错误的情形。 
	static Level ERROR ERROR level指出虽然发生错误事件，但仍然不影响系统的继续运行。 static Level FATAL 
	FATAL level指出每个严重的错误事件将会导致应用程序的退出。 另外，还有两个可用的特别的日志记录级别: (以下描述来自log4j API 
	http://jakarta.apache.org/log4j/docs/api/index.html): static Level ALL ALL 
	Level是最低等级的，用于打开所有日志记录。 static Level OFF OFF Level是最高等级的，用于关闭所有日志记录。 优先级从高到低分别是 
	ERROR、WARN、INFO、DEBUG。通过在这里定义的级别，您可以控制到应用程序中相应级别的日志信息的开关。 比如在这里定义了INFO级别，则应用程序中所有DEBUG级别的日志信息将不被打印出来。程序会打印高于或等于所设置级别的日志，设置的日志等级越高，打印出来的日志就越少。 
	如果设置级别为INFO，则优先级高于等于INFO级别（如：INFO、 WARN、ERROR）的日志信息将可以被输出,小于该级别的如DEBUG将不会被输出 
	configuration 属性 debug="true" scan="true" scanPeriod="30 minutes" -->
<configuration>

	<springProperty scope="context" name="logLevel" source="log.level"/>
    <property name="logPath" value="logs" />
    
    <property name="max.file.size" value="500MB"/>
    <!-- 保留的归档文件的最大天数 -->
    <property name="max.history" value="20"/>
    <!-- 控制所有归档日志文件的总大小 -->
    <property name="total.size.cap" value="10GB"/>
	<!-- 控制台输出日志 -->
	<appender name="STDOUT" class="ch.qos.logback.core.ConsoleAppender">
		<encoder charset="UTF-8">
			<pattern>%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %p, %c{36}: %m%n</pattern>
		</encoder>
		<!-- 此日志appender是为开发使用，只配置最底级别，控制台输出的日志级别是大于或等于此级别的日志信息 -->
		<filter class="ch.qos.logback.classic.filter.ThresholdFilter">
			<level>DEBUG</level>
		</filter>
	</appender>

	<!-- 文件输出日志 (文件大小策略进行文件输出，超过指定大小对文件备份) -->
	<appender name="FILEERROR"
		class="ch.qos.logback.core.rolling.RollingFileAppender">
		<File>${logPath}/usmartSafeTransferError.log</File>
		<rollingPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy">
			<!-- 归档的日志文件的路径，例如今天是2013-12-21日志，当前写的日志文件路径为file节点指定， 而2013-12-21的日志文件在由fileNamePattern指定。%d{yyyy-MM-dd}指定日期格式，%i指定索引 -->
			<fileNamePattern>${logPath}/backup/usmartSafeTransferError.%d{yyyy-MM-dd}.%i.zip
			</fileNamePattern>
			<maxFileSize>${max.file.size}</maxFileSize>
            <maxHistory>${max.history}</maxHistory>
            <totalSizeCap>${total.size.cap}</totalSizeCap>
		</rollingPolicy>
		<!-- 追加方式记录日志 -->
		<append>true</append>
		<!-- 日志文件的格式 -->
		<encoder>
			<pattern>%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %p, %c{36}: %m%n</pattern>
		</encoder>
		<!-- 此日志文件只记录error级别的 -->
		<filter class="ch.qos.logback.classic.filter.LevelFilter">
			<level>ERROR</level>
			<onMatch>ACCEPT</onMatch>
			<onMismatch>DENY</onMismatch>
		</filter>
	</appender>

	<appender name="FILEINFO"
		class="ch.qos.logback.core.rolling.RollingFileAppender">
		<File>${logPath}/usmartSafeTransferInfo.log</File>

		<rollingPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy">
			<fileNamePattern>${logPath}/backup/usmartSafeTransferInfo.%d{yyyy-MM-dd}.%i.zip
			</fileNamePattern>
			<maxFileSize>${max.file.size}</maxFileSize>
            <maxHistory>${max.history}</maxHistory>
            <totalSizeCap>${total.size.cap}</totalSizeCap>
		</rollingPolicy>
		<append>true</append>
		<encoder>
			<pattern>%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %p, %c{36}: %m%n</pattern>
		</encoder>
		<!-- 此日志文件只记录INFO级别，不记录大于INFO级别的日志 -->
		<filter class="ch.qos.logback.classic.filter.LevelFilter">
			<level>INFO</level>
			<onMatch>ACCEPT</onMatch>
			<onMismatch>DENY</onMismatch>
		</filter>
	</appender>

	<appender name="FILEWARN"
		class="ch.qos.logback.core.rolling.RollingFileAppender">
		<File>${logPath}/usmartSafeTransferWarn.log</File>

		<rollingPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy">
			<fileNamePattern>${logPath}/backup/usmartSafeTransferWarn.%d{yyyy-MM-dd}.%i.zip
			</fileNamePattern>
			<maxFileSize>${max.file.size}</maxFileSize>
            <maxHistory>${max.history}</maxHistory>
            <totalSizeCap>${total.size.cap}</totalSizeCap>
		</rollingPolicy>
		<append>true</append>
		<encoder>
			<pattern>%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %p, %c{36}: %m%n</pattern>
		</encoder>
		<!-- 此日志文件只记录WARN级别，不记录大于WARN级别的日志 -->
		<filter class="ch.qos.logback.classic.filter.LevelFilter">
			<level>WARN</level>
			<onMatch>ACCEPT</onMatch>
			<onMismatch>DENY</onMismatch>
		</filter>
	</appender>

	<appender name="FILEDEBUG"
		class="ch.qos.logback.core.rolling.RollingFileAppender">
		<File>${logPath}/usmartSafeTransferDebug.log</File>

		<rollingPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy">
			<fileNamePattern>${logPath}/backup/usmartSafeTransferDebug.%d{yyyy-MM-dd}.%i.zip
			</fileNamePattern>
			<maxFileSize>${max.file.size}</maxFileSize>
            <maxHistory>${max.history}</maxHistory>
            <totalSizeCap>${total.size.cap}</totalSizeCap>
		</rollingPolicy>
		<append>true</append>
		<encoder>
			<pattern>%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %p, %c{36}: %m%n</pattern>
		</encoder>
		<!-- 此日志文件只记录DEBUG级别，不记录大于DEBUG级别的日志 -->
		<filter class="ch.qos.logback.classic.filter.LevelFilter">
			<level>DEBUG</level>
			<onMatch>ACCEPT</onMatch>
			<onMismatch>DENY</onMismatch>
		</filter>
	</appender>

	<!-- <logger name="org.hibernate.type.descriptor.sql.BasicBinder" level="ERROR" 
		/> <logger name="org.springframework" level="ERROR" /> -->
		
<!-- 	<logger name="com.apache.ibatis" level="INFO"/>
    <logger name="java.sql.Connection" level="INFO"/>
    <logger name="java.sql.Statement" level="INFO"/>
    <logger name="java.sql.PreparedStatement" level="INFO"/>
    
    <logger name="org.mybatis" level="DEBUG" /> -->
    
    <logger name="com.goldcard.iot.dao" level="DEBUG"/>

	<root level="INFO">
		<!-- 生产环境将请stdout去掉 -->
		<appender-ref ref="FILEINFO" />
		<appender-ref ref="FILEWARN" />
		<appender-ref ref="FILEERROR" />
		<appender-ref ref="STDOUT" /> 
		<!-- 生产环境将请stdout去掉 
		-->
	</root>
	<!-- 下面配置一些第三方包的日志过滤级别，用于避免刷屏 -->
	<logger name="org.springframework" level="info" />

	
</configuration>